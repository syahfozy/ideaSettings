<application>
  <component name="co.fitten.llmintellij.LlmSettingsState">
    <option name="enabled_global" value="false" />
    <option name="userData">
      <UserData>
        <option name="apiKey" value="FT_DlpmlaEKL2wCeT8xANHEt5RMVD2bRK4L8PLwlh6kjWRFgHMDsB" />
        <option name="panelState" value="{&quot;type&quot;:&quot;chat&quot;,&quot;conversations&quot;:[{&quot;id&quot;:&quot;adii3oe56&quot;,&quot;header&quot;:{&quot;title&quot;:&quot;private void buildInfo(QueryCreditProductInfoReq request, String tppCode, ProcessReq req) {\n        if (CreditTppCodeEnum.BAIWANG.getCode().equals(tppCode)) {\n            request.getEnterpriseInfo().setTppTradeNo(req.getTradeNo());\n            request.getEnterpriseInfo().setTaxNo(req.getTaxNo());\n        }\n        if (CreditTppCodeEnum.JINDIE.getCode().equals(tppCode)) {\n            request.getEnterpriseInfo().setTppTradeNo(req.getTradeNo());\n            request.getEnterpriseInfo().setTaxNo(req.getTaxNo());\n        }\n        if (CreditTppCodeEnum.CLEANPRODUCT.getCode().equals(tppCode)) {\n            request.getUserInfo().setTppTradeNo(req.getTppTradeNo());\n        }\n    }\n我有两个方法，入参req不一样，但其他方法都一样 如何抽象复用这个方法呢&quot;,&quot;isTitleMessage&quot;:true,&quot;codicon&quot;:&quot;comment-discussion&quot;},&quot;content&quot;:{&quot;type&quot;:&quot;messageExchange&quot;,&quot;messages&quot;:[{&quot;author&quot;:&quot;bot&quot;,&quot;content&quot;:&quot;你可以通过将公共逻辑提取到一个新的方法中来实现代码的复用。这个新的方法可以接受一个通用的参数对象，然后在原始方法中调用这个新的方法。以下是一个示例：\n\n```java\nprivate void buildInfo(QueryCreditProductInfoReq request, String tppCode, ProcessReq req) {\n    if (CreditTppCodeEnum.BAIWANG.getCode().equals(tppCode) || CreditTppCodeEnum.JINDIE.getCode().equals(tppCode)) {\n        setEnterpriseInfo(request.getEnterpriseInfo(), req.getTradeNo(), req.getTaxNo());\n    }\n    if (CreditTppCodeEnum.CLEANPRODUCT.getCode().equals(tppCode)) {\n        setUserInfo(request.getUserInfo(), req.getTppTradeNo());\n    }\n}\n\nprivate void setEnterpriseInfo(EnterpriseInfo enterpriseInfo, String tradeNo, String taxNo) {\n    enterpriseInfo.setTppTradeNo(tradeNo);\n    enterpriseInfo.setTaxNo(taxNo);\n}\n\nprivate void setUserInfo(UserInfo userInfo, String tppTradeNo) {\n    userInfo.setTppTradeNo(tppTradeNo);\n}\n```\n\n在这个示例中，`setEnterpriseInfo` 和 `setUserInfo` 方法分别处理 `EnterpriseInfo` 和 `UserInfo` 的设置逻辑，而 `buildInfo` 方法则根据 `tppCode` 调用相应的方法。这样，你就可以在不同的方法中复用这些设置逻辑。&quot;}],&quot;state&quot;:{&quot;type&quot;:&quot;userCanReply&quot;,&quot;responsePlaceholder&quot;:&quot;进行回复...&quot;}},&quot;inputs&quot;:&quot;&lt;|system|&gt;\n请完全使用中文回答。\n&lt;|end|&gt;\n&lt;|user|&gt;\nprivate void buildInfo(QueryCreditProductInfoReq request, String tppCode, ProcessReq req) {\n        if (CreditTppCodeEnum.BAIWANG.getCode().equals(tppCode)) {\n            request.getEnterpriseInfo().setTppTradeNo(req.getTradeNo());\n            request.getEnterpriseInfo().setTaxNo(req.getTaxNo());\n        }\n        if (CreditTppCodeEnum.JINDIE.getCode().equals(tppCode)) {\n            request.getEnterpriseInfo().setTppTradeNo(req.getTradeNo());\n            request.getEnterpriseInfo().setTaxNo(req.getTaxNo());\n        }\n        if (CreditTppCodeEnum.CLEANPRODUCT.getCode().equals(tppCode)) {\n            request.getUserInfo().setTppTradeNo(req.getTppTradeNo());\n        }\n    }\n我有两个方法，入参req不一样，但其他方法都一样 如何抽象复用这个方法呢\n&lt;|end|&gt;\n&lt;|assistant|&gt;\n你可以通过将公共逻辑提取到一个新的方法中来实现代码的复用。这个新的方法可以接受一个通用的参数对象，然后在原始方法中调用这个新的方法。以下是一个示例：\n\n```java\nprivate void buildInfo(QueryCreditProductInfoReq request, String tppCode, ProcessReq req) {\n    if (CreditTppCodeEnum.BAIWANG.getCode().equals(tppCode) || CreditTppCodeEnum.JINDIE.getCode().equals(tppCode)) {\n        setEnterpriseInfo(request.getEnterpriseInfo(), req.getTradeNo(), req.getTaxNo());\n    }\n    if (CreditTppCodeEnum.CLEANPRODUCT.getCode().equals(tppCode)) {\n        setUserInfo(request.getUserInfo(), req.getTppTradeNo());\n    }\n}\n\nprivate void setEnterpriseInfo(EnterpriseInfo enterpriseInfo, String tradeNo, String taxNo) {\n    enterpriseInfo.setTppTradeNo(tradeNo);\n    enterpriseInfo.setTaxNo(taxNo);\n}\n\nprivate void setUserInfo(UserInfo userInfo, String tppTradeNo) {\n    userInfo.setTppTradeNo(tppTradeNo);\n}\n```\n\n在这个示例中，`setEnterpriseInfo` 和 `setUserInfo` 方法分别处理 `EnterpriseInfo` 和 `UserInfo` 的设置逻辑，而 `buildInfo` 方法则根据 `tppCode` 调用相应的方法。这样，你就可以在不同的方法中复用这些设置逻辑。\n&lt;|end|&gt;\n&quot;,&quot;initialPrompt&quot;:&quot;&quot;},{&quot;id&quot;:&quot;v3jotuqfe&quot;,&quot;header&quot;:{&quot;title&quot;:&quot;新的对话&quot;,&quot;isTitleMessage&quot;:true,&quot;codicon&quot;:&quot;comment-discussion&quot;},&quot;content&quot;:{&quot;type&quot;:&quot;messageExchange&quot;,&quot;messages&quot;:[],&quot;state&quot;:{&quot;type&quot;:&quot;userCanReply&quot;,&quot;responsePlaceholder&quot;:&quot;进行询问...&quot;}},&quot;reference&quot;:{&quot;selectText&quot;:&quot;&quot;,&quot;selectRange&quot;:&quot;&quot;},&quot;inputs&quot;:&quot;&lt;|system|&gt;\nYou are an AI code assistant named Fitten Code which is developed by Fitten Tech.\nThe assistant is happy to help with almost anything, and will do its best to understand exactly what is needed.\nStay focused on current developer request. Consider the possibility that there might not be a solution.\nAsk for clarification if the message does not make sense or more input is needed.\nUse the style of a documentation article.\nOmit any links.\nInclude code snippets (using Markdown) and examples where appropriate.\nPlease refuse to answer sensitive information about politics, pornography, violence, etc.\n请完全使用中文回答。 \n&lt;|end|&gt;\n&lt;|user|&gt;\n下面的代码由用户选择，可能在后续对话中提及： \n```\n\n```\n&lt;|end|&gt;\n&lt;|assistant|&gt;\n理解，你可以继续输入你的问题。 \n&lt;|end|&gt;\n&quot;}],&quot;selectedConversationId&quot;:&quot;v3jotuqfe&quot;,&quot;hasFittenAIApiKey&quot;:true,&quot;surfacePromptForFittenAIPlus&quot;:false}" />
      </UserData>
    </option>
  </component>
</application>